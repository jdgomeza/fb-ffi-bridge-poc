// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod my_game {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod events {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVENT: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVENT: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVENT: [Event; 3] = [
  Event::NONE,
  Event::PlayerSpawn,
  Event::PlayerMoved,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Event(pub u8);
#[allow(non_upper_case_globals)]
impl Event {
  pub const NONE: Self = Self(0);
  pub const PlayerSpawn: Self = Self(1);
  pub const PlayerMoved: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::PlayerSpawn,
    Self::PlayerMoved,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::PlayerSpawn => Some("PlayerSpawn"),
      Self::PlayerMoved => Some("PlayerMoved"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Event {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Event {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Event {
    type Output = Event;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<u8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Event {
  type Scalar = u8;
  #[inline]
  fn to_little_endian(self) -> u8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: u8) -> Self {
    let b = u8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Event {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Event {}
pub struct EventUnionTableOffset {}

// struct UUID, aligned to 8
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct UUID(pub [u8; 16]);
impl Default for UUID { 
  fn default() -> Self { 
    Self([0; 16])
  }
}
impl core::fmt::Debug for UUID {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("UUID")
      .field("a", &self.a())
      .field("b", &self.b())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for UUID {}
impl<'a> flatbuffers::Follow<'a> for UUID {
  type Inner = &'a UUID;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a UUID>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a UUID {
  type Inner = &'a UUID;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<UUID>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for UUID {
    type Output = UUID;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const UUID as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for UUID {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> UUID {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    a: u64,
    b: u64,
  ) -> Self {
    let mut s = Self([0; 16]);
    s.set_a(a);
    s.set_b(b);
    s
  }

  pub fn a(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_a(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn b(&self) -> u64 {
    let mut mem = core::mem::MaybeUninit::<<u64 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_b(&mut self, x: u64) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<u64 as EndianScalar>::Scalar>(),
      );
    }
  }

}

// struct Point3D, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Point3D(pub [u8; 12]);
impl Default for Point3D { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl core::fmt::Debug for Point3D {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Point3D")
      .field("x", &self.x())
      .field("y", &self.y())
      .field("z", &self.z())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Point3D {}
impl<'a> flatbuffers::Follow<'a> for Point3D {
  type Inner = &'a Point3D;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Point3D>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Point3D {
  type Inner = &'a Point3D;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Point3D>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Point3D {
    type Output = Point3D;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Point3D as *const u8, Self::size());
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for Point3D {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Point3D {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
    z: f32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_x(x);
    s.set_y(y);
    s.set_z(z);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn z(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_z(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum PlayerSpawnOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerSpawn<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerSpawn<'a> {
  type Inner = PlayerSpawn<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerSpawn<'a> {
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerSpawn { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PlayerSpawnArgs<'args>
  ) -> flatbuffers::WIPOffset<PlayerSpawn<'bldr>> {
    let mut builder = PlayerSpawnBuilder::new(_fbb);
    if let Some(x) = args.pos { builder.add_pos(x); }
    if let Some(x) = args.player_id { builder.add_player_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_id(&self) -> Option<&'a UUID> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<UUID>(PlayerSpawn::VT_PLAYER_ID, None)}
  }
  #[inline]
  pub fn pos(&self) -> Option<&'a Point3D> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Point3D>(PlayerSpawn::VT_POS, None)}
  }
}

impl flatbuffers::Verifiable for PlayerSpawn<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<UUID>("player_id", Self::VT_PLAYER_ID, false)?
     .visit_field::<Point3D>("pos", Self::VT_POS, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerSpawnArgs<'a> {
    pub player_id: Option<&'a UUID>,
    pub pos: Option<&'a Point3D>,
}
impl<'a> Default for PlayerSpawnArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerSpawnArgs {
      player_id: None,
      pos: None,
    }
  }
}

pub struct PlayerSpawnBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlayerSpawnBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_id(&mut self, player_id: &UUID) {
    self.fbb_.push_slot_always::<&UUID>(PlayerSpawn::VT_PLAYER_ID, player_id);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &Point3D) {
    self.fbb_.push_slot_always::<&Point3D>(PlayerSpawn::VT_POS, pos);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlayerSpawnBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlayerSpawnBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerSpawn<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerSpawn<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerSpawn");
      ds.field("player_id", &self.player_id());
      ds.field("pos", &self.pos());
      ds.finish()
  }
}
pub enum PlayerMovedOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerMoved<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerMoved<'a> {
  type Inner = PlayerMoved<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerMoved<'a> {
  pub const VT_PLAYER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POS1: flatbuffers::VOffsetT = 6;
  pub const VT_POS2: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerMoved { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PlayerMovedArgs<'args>
  ) -> flatbuffers::WIPOffset<PlayerMoved<'bldr>> {
    let mut builder = PlayerMovedBuilder::new(_fbb);
    if let Some(x) = args.pos2 { builder.add_pos2(x); }
    if let Some(x) = args.pos1 { builder.add_pos1(x); }
    if let Some(x) = args.player_id { builder.add_player_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn player_id(&self) -> Option<&'a UUID> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<UUID>(PlayerMoved::VT_PLAYER_ID, None)}
  }
  #[inline]
  pub fn pos1(&self) -> Option<&'a Point3D> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Point3D>(PlayerMoved::VT_POS1, None)}
  }
  #[inline]
  pub fn pos2(&self) -> Option<&'a Point3D> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Point3D>(PlayerMoved::VT_POS2, None)}
  }
}

impl flatbuffers::Verifiable for PlayerMoved<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<UUID>("player_id", Self::VT_PLAYER_ID, false)?
     .visit_field::<Point3D>("pos1", Self::VT_POS1, false)?
     .visit_field::<Point3D>("pos2", Self::VT_POS2, false)?
     .finish();
    Ok(())
  }
}
pub struct PlayerMovedArgs<'a> {
    pub player_id: Option<&'a UUID>,
    pub pos1: Option<&'a Point3D>,
    pub pos2: Option<&'a Point3D>,
}
impl<'a> Default for PlayerMovedArgs<'a> {
  #[inline]
  fn default() -> Self {
    PlayerMovedArgs {
      player_id: None,
      pos1: None,
      pos2: None,
    }
  }
}

pub struct PlayerMovedBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlayerMovedBuilder<'a, 'b> {
  #[inline]
  pub fn add_player_id(&mut self, player_id: &UUID) {
    self.fbb_.push_slot_always::<&UUID>(PlayerMoved::VT_PLAYER_ID, player_id);
  }
  #[inline]
  pub fn add_pos1(&mut self, pos1: &Point3D) {
    self.fbb_.push_slot_always::<&Point3D>(PlayerMoved::VT_POS1, pos1);
  }
  #[inline]
  pub fn add_pos2(&mut self, pos2: &Point3D) {
    self.fbb_.push_slot_always::<&Point3D>(PlayerMoved::VT_POS2, pos2);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlayerMovedBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlayerMovedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerMoved<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerMoved<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerMoved");
      ds.field("player_id", &self.player_id());
      ds.field("pos1", &self.pos1());
      ds.field("pos2", &self.pos2());
      ds.finish()
  }
}
pub enum PlayerEventOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PlayerEvent<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PlayerEvent<'a> {
  type Inner = PlayerEvent<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PlayerEvent<'a> {
  pub const VT_TS: flatbuffers::VOffsetT = 4;
  pub const VT_EVENT_TYPE: flatbuffers::VOffsetT = 6;
  pub const VT_EVENT: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PlayerEvent { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args PlayerEventArgs
  ) -> flatbuffers::WIPOffset<PlayerEvent<'bldr>> {
    let mut builder = PlayerEventBuilder::new(_fbb);
    builder.add_ts(args.ts);
    if let Some(x) = args.event { builder.add_event(x); }
    builder.add_event_type(args.event_type);
    builder.finish()
  }


  #[inline]
  pub fn ts(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(PlayerEvent::VT_TS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn event_type(&self) -> Event {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Event>(PlayerEvent::VT_EVENT_TYPE, Some(Event::NONE)).unwrap()}
  }
  #[inline]
  pub fn event(&self) -> Option<flatbuffers::Table<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(PlayerEvent::VT_EVENT, None)}
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn event_as_player_spawn(&self) -> Option<PlayerSpawn<'a>> {
    if self.event_type() == Event::PlayerSpawn {
      self.event().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PlayerSpawn::init_from_table(t) }
     })
    } else {
      None
    }
  }

  #[inline]
  #[allow(non_snake_case)]
  pub fn event_as_player_moved(&self) -> Option<PlayerMoved<'a>> {
    if self.event_type() == Event::PlayerMoved {
      self.event().map(|t| {
       // Safety:
       // Created from a valid Table for this object
       // Which contains a valid union in this slot
       unsafe { PlayerMoved::init_from_table(t) }
     })
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for PlayerEvent<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("ts", Self::VT_TS, false)?
     .visit_union::<Event, _>("event_type", Self::VT_EVENT_TYPE, "event", Self::VT_EVENT, false, |key, v, pos| {
        match key {
          Event::PlayerSpawn => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PlayerSpawn>>("Event::PlayerSpawn", pos),
          Event::PlayerMoved => v.verify_union_variant::<flatbuffers::ForwardsUOffset<PlayerMoved>>("Event::PlayerMoved", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct PlayerEventArgs {
    pub ts: u64,
    pub event_type: Event,
    pub event: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for PlayerEventArgs {
  #[inline]
  fn default() -> Self {
    PlayerEventArgs {
      ts: 0,
      event_type: Event::NONE,
      event: None,
    }
  }
}

pub struct PlayerEventBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PlayerEventBuilder<'a, 'b> {
  #[inline]
  pub fn add_ts(&mut self, ts: u64) {
    self.fbb_.push_slot::<u64>(PlayerEvent::VT_TS, ts, 0);
  }
  #[inline]
  pub fn add_event_type(&mut self, event_type: Event) {
    self.fbb_.push_slot::<Event>(PlayerEvent::VT_EVENT_TYPE, event_type, Event::NONE);
  }
  #[inline]
  pub fn add_event(&mut self, event: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PlayerEvent::VT_EVENT, event);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PlayerEventBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PlayerEventBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PlayerEvent<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PlayerEvent<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PlayerEvent");
      ds.field("ts", &self.ts());
      ds.field("event_type", &self.event_type());
      match self.event_type() {
        Event::PlayerSpawn => {
          if let Some(x) = self.event_as_player_spawn() {
            ds.field("event", &x)
          } else {
            ds.field("event", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        Event::PlayerMoved => {
          if let Some(x) = self.event_as_player_moved() {
            ds.field("event", &x)
          } else {
            ds.field("event", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("event", &x)
        },
      };
      ds.finish()
  }
}
pub enum EventBatchOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EventBatch<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EventBatch<'a> {
  type Inner = EventBatch<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EventBatch<'a> {
  pub const VT_EVENT_BATCH: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EventBatch { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args EventBatchArgs<'args>
  ) -> flatbuffers::WIPOffset<EventBatch<'bldr>> {
    let mut builder = EventBatchBuilder::new(_fbb);
    if let Some(x) = args.event_batch { builder.add_event_batch(x); }
    builder.finish()
  }


  #[inline]
  pub fn event_batch(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PlayerEvent<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PlayerEvent>>>>(EventBatch::VT_EVENT_BATCH, None)}
  }
}

impl flatbuffers::Verifiable for EventBatch<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<PlayerEvent>>>>("event_batch", Self::VT_EVENT_BATCH, false)?
     .finish();
    Ok(())
  }
}
pub struct EventBatchArgs<'a> {
    pub event_batch: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<PlayerEvent<'a>>>>>,
}
impl<'a> Default for EventBatchArgs<'a> {
  #[inline]
  fn default() -> Self {
    EventBatchArgs {
      event_batch: None,
    }
  }
}

pub struct EventBatchBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EventBatchBuilder<'a, 'b> {
  #[inline]
  pub fn add_event_batch(&mut self, event_batch: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<PlayerEvent<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EventBatch::VT_EVENT_BATCH, event_batch);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EventBatchBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EventBatchBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EventBatch<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EventBatch<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EventBatch");
      ds.field("event_batch", &self.event_batch());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PlayerEvent`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_event_unchecked`.
pub fn root_as_player_event(buf: &[u8]) -> Result<PlayerEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PlayerEvent>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PlayerEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_player_event_unchecked`.
pub fn size_prefixed_root_as_player_event(buf: &[u8]) -> Result<PlayerEvent, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PlayerEvent>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PlayerEvent` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_event_unchecked`.
pub fn root_as_player_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PlayerEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PlayerEvent<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PlayerEvent` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_player_event_unchecked`.
pub fn size_prefixed_root_as_player_event_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PlayerEvent<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PlayerEvent<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PlayerEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PlayerEvent`.
pub unsafe fn root_as_player_event_unchecked(buf: &[u8]) -> PlayerEvent {
  flatbuffers::root_unchecked::<PlayerEvent>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PlayerEvent and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PlayerEvent`.
pub unsafe fn size_prefixed_root_as_player_event_unchecked(buf: &[u8]) -> PlayerEvent {
  flatbuffers::size_prefixed_root_unchecked::<PlayerEvent>(buf)
}
#[inline]
pub fn finish_player_event_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<PlayerEvent<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_player_event_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<PlayerEvent<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Events
}  // pub mod MyGame

